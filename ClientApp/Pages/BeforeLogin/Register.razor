@page "/register"

@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IJSRuntime js
@using MyClientApp.Services 
@inject IPolicyHolderDtoService PolicyHolderService
<header>
    <nav class="navbar">
        <div class="navbar-left">
            <img src="/images/CompanyLogo-removebg-preview.png" alt="Logo" class="logo" />
        </div>
        <div class="navbar-right">

            <a @onclick="NavigateToHome">Home</a>
            <a @onclick="NavigateToPlansBefore">Plans</a>
            <a @onclick="NavigateToLogin">Login/Register</a>

            <a @onclick="NavigateToContact">Contact Us</a>
            <a @onclick="NavigateToAbout">About Us</a>
        </div>
    </nav>
</header>
<h3 class="page-title">Create a New Account</h3>

<img src="/images/image.png" alt="Medical Insurance" style="width:60vh; float:left; margin-right:20px" />

<div class="form-container">
    <EditForm Model="registerModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" class="form-control" @bind-Value="registerModel.Name" />
            <ValidationMessage For="@(() => registerModel.Name)" />
        </div>

        <div class="form-group">
            <label for="Phone">Phone Number</label>
            <InputText id="Phone" class="form-control" @bind-Value="registerModel.Phone" />
            <ValidationMessage For="@(() => registerModel.Phone)" />
        </div>

        <div class="form-group">
            <label for="Email">Email</label>
            <InputText id="Email" class="form-control" @bind-Value="registerModel.Email" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>

        <div class="form-group">
            <label for="Password">Password</label>
            <InputText id="Password" type="password" class="form-control" @bind-Value="registerModel.PasswordHash" />
            <ValidationMessage For="@(() => registerModel.PasswordHash)" />
        </div>

        <div class="form-group">
            <label for="Address">Address</label>
            <InputText id="Address" class="form-control" @bind-Value="registerModel.Address" />
            <ValidationMessage For="@(() => registerModel.Address)" />
        </div>

        <button type="submit" class="btn btn-primary">Register</button>
    </EditForm>
</div>
<style>

    .login-container {
        display: flex;
        align-items: center;
        justify-content: right;
        height: 100vh;
    }


    .form-container {
        flex: 2;
        display: flex;
        justify-content: right;
    }

    .card-carousel {
        display: flex;
        align-items: center;
    }

    .card-wrapper {
        display: flex;
        flex-direction: row;
        gap: 20px;
        overflow: hidden;
        width: 80%;
    }

    .card {
        width: 28rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out;
    }

    .card-login {
        width: 28rem;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease-in-out;
        justify-content: left;
    }

    .card:hover {
        transform: scale(1.1);
        z-index: 1;
    }

    .card-body {
        padding: 15px;
    }

    .card-title {
        font-size: 1.25rem;
        margin-bottom: 10px;
    }

    .card-text {
        font-size: 1rem;
        color: #333;
    }

    /* Header */
    header {
        background-color: #fff;
        border-bottom: 1px solid #ddd;
        padding: 15px 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .navbar-brand img {
        height: 40px;
    }

    .navbar-nav {
        list-style: none;
        display: flex;
        gap: 20px;
        margin: 0;
    }

        .navbar-nav a {
            text-decoration: none;
            color: var(--secondary-color);
            font-weight: bold;
            transition: color 0.3s;
        }

            .navbar-nav a:hover {
                color: var(--primary-color);
            }

    .navbar-right {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .login-button {
        background-color: var(--secondary-color);
        color: white;
        padding: 8px 15px;
        border: none;
        border-radius: 50px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

        .login-button:hover {
            background-color: var(--primary-color);
        }

    /* Main Section */
    main {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 50px 0;
        max-width: 1200px;
        margin: 0 auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

</style>
@code {
    private PolicyHolderDto registerModel = new PolicyHolderDto();

    private async Task HandleValidSubmit()
    {
        // Here you call the service to add the policy holder
        await PolicyHolderService.Add(registerModel);

        // Optionally, you can show a success message or navigate to another page
        await js.InvokeVoidAsync("alert", "Registration successful!");
        Navigation.NavigateTo("/Login");
    }
    private void NavigateToHome() => Navigation.NavigateTo("/");
    private void NavigateToPlansBefore() => Navigation.NavigateTo("/PlansBefore");
    private void NavigateToContact() => Navigation.NavigateTo("/ContactUs");
    private void NavigateToAbout() => Navigation.NavigateTo("/AboutUs");
    private void NavigateToLogin() => Navigation.NavigateTo("/Login");
}
