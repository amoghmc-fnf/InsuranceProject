@page "/YourPolicies/{PolicyHolderId:int}"

@using MyClientApp.Services
@inject IPolicyService PolicyService
@inject IInsuredPolicyService InsuredPolicyService
@inject IInsuredService InsuredService
@inject IPolicyHolderDtoService PolicyHolderService
@inject IInsuranceTypeService InsuranceTypeService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Submit a Claim</title>
    <nav class="navbar">
        <div class="navbar-left">
            <img src="/images/CompanyLogo-removebg-preview.png" alt="Logo" class="logo" />
        </div>
        <div class="navbar-right">


            <a @onclick="NavigateToProfile">Profile</a>
            <a @onclick="NavigateToPlans">Plans</a>
            <a @onclick="NavigateToPolicies">Your Policies</a>
            <a @onclick="NavigateToClaimStatus">Claim Status</a>
            <a @onclick="Logout">Logout</a>
        </div>
    </nav>
</head>
<body>
    <div class="container">
        <div class="card">
            <div class="card-header">
                Your Policies
            </div>
            <div class="card-body">
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center mt-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-4" role="alert">
                        @errorMessage
                    </div>
                }
                else
                {
                    <table class="table table-striped table-bordered mt-4">
                        <thead>
                            <tr>
                                <th scope="col">Policy ID</th>
                                <th scope="col">InsuredPolicy ID</th>
                                <th scope="col">Policy Number</th>
                                <th scope="col">Insurance Type</th>
                                <th scope="col">Start Date</th>
                                <th scope="col">End Date</th>
                                <th scope="col">Status</th>
                                <th scope="col">Premium Amount</th>
                                <th scope="col">Days Left for Renewal</th>
                                <th scope="col">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (insuredPolicies != null && insuredPolicies.Any())
                            {
                                var displayedPolicyIds = new HashSet<int>();

                                @foreach (var insuredPolicy in insuredPolicies)
                                {
                                    var policy = policies.FirstOrDefault(p => p.PolicyId == insuredPolicy.PolicyId);

                                    if (policy != null && !displayedPolicyIds.Contains(policy.PolicyId))
                                    {
                                        displayedPolicyIds.Add(policy.PolicyId); // Mark this policy as displayed

                                        var daysLeft = (policy.EndDate - DateTime.Today).Days;
                                        var insuranceType = InsuranceType.FirstOrDefault(it => it.InsuranceId == policy.InsuranceTypeId);
                                        var daysSinceStart = (DateTime.Today - policy.StartDate).Days;

                                        <tr class="@GetRowClass(policy.EndDate)">
                                            <td>@policy.PolicyId</td>
                                            <td>@insuredPolicy.InsuredPolicyId</td>
                                            <td>@policy.PolicyNumber</td>
                                            <td>@insuranceType?.InsuranceType</td>
                                            <td>@policy.StartDate.ToShortDateString()</td>
                                            <td>@policy.EndDate.ToShortDateString()</td>
                                            <td>@insuredPolicy.ApprovalStatus</td>
                                            <td>@policy.PremiumAmount</td>
                                            <td>@(daysLeft > 0 ? $"{daysLeft} days" : "Expired")</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    @if (insuredPolicy.ApprovalStatus == "Pending" || insuredPolicy.ApprovalStatus == "Withdrawal")
                                                    {
                                                        <button class="btn btn-secondary me-2" disabled>
                                                            <i class="fas fa-lock"></i> Renew
                                                        </button>
                                                        <button class="btn btn-secondary me-2" disabled>
                                                            <i class="fas fa-lock"></i> Claim
                                                        </button>
                                                        <button class="btn btn-secondary me-2" disabled>
                                                            <i class="fas fa-lock"></i> Download
                                                        </button>
                                                    }
                                                    else if (policy.EndDate < DateTime.Today)
                                                    {
                                                        <button class="btn btn-danger me-2" @onclick="() => ShowRenewModal(policy.PolicyId)">
                                                            <i class="fas fa-sync-alt"></i> Renew
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <button class="btn btn-success me-2" disabled>
                                                            <i class="fas fa-check-circle"></i> Active
                                                        </button>
                                                    }

                                                    @if (insuredPolicy.ApprovalStatus == "Approved" && insuredPolicy.RenewalStatus != "Expired")
                                                    {
                                                        <button class="btn btn-success me-2" @onclick="() => ShowClaimModal(policy.PolicyId)">
                                                            <i class="fas fa-handshake"></i> Claim
                                                        </button>
                                                        <button class="btn btn-info me-2" @onclick="() => ShowDownloadModal(policy.PolicyId)">
                                                            <i class="fas fa-download"></i> Download
                                                        </button>
                                                    }

                                                    @if (insuredPolicy.ApprovalStatus == "Approved" && daysSinceStart <= 45)
                                                    {
                                                        <button class="btn btn-warning me-2" @onclick="() => ShowWithdrawModal(policy.PolicyId)">
                                                            <i class="fas fa-times-circle"></i> Withdraw
                                                        </button>
                                                    }
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="10" class="text-center">No policies found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
     <style>
        body {
            background-color: #f4f7f6;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .container {
            max-width: 1200px;
            margin-top: 2rem;
        }

        .card {
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
           
        }

        .card-header {
            background-color: #0056b3;
            color: #ffffff;
            border-bottom: 1px solid #004494;
            font-size: 1.5rem;
            font-weight: 600;
        }


        .form-control {
            border-radius: 10px;
        }


        .table {
            border-radius: 8px;
            overflow: hidden;
        }

            .table th, .table td {
                vertical-align: middle;
                text-align: center;
            }

            .table th {
                background-color: #0056b3;
                color: #ffffff;
                font-weight: 600;
            }

            .table td {
                font-size: 0.875rem;
            }

        .btn-primary {
            background-color: #0056b3;
            border-color: #0056b3;
        }

            .btn-primary:hover {
                background-color: #004494;
                border-color: #003d82;
            }

        .btn-secondary {
            background-color: #6c757d;
            border-color: #6c757d;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
                border-color: #545b62;
            }

        .modal-content {
            border-radius: 8px;
        }

        .modal-header {
            background-color: #0056b3;
            color: #ffffff;
        }

        .modal-footer button {
            border-radius: 8px;
        }

        .spinner-border {
            width: 2rem;
            height: 2rem;
        }

        .alert {
            border-radius: 8px;
        }
    </style>

    <!-- Modals -->
    @* Common Modal Structure *@
    @* Modal for Withdraw *@
    <div class="modal fade" id="withdrawModal" tabindex="-1" role="dialog" aria-labelledby="withdrawModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="withdrawModalLabel">Confirm Withdrawal</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to withdraw this policy?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger btn-sm" @onclick="WithdrawConfirmed">Withdraw</button>
                </div>
            </div>
        </div>
    </div>

    @* Modal for Download *@
    <div class="modal fade" id="downloadModal" tabindex="-1" role="dialog" aria-labelledby="downloadModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="downloadModalLabel">Download Policy</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Click the button below to download the policy document.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="DownloadConfirmed">Download</button>
                </div>
            </div>
        </div>
    </div>

    @* Modal for Claim *@
    <div class="modal fade" id="claimModal" tabindex="-1" role="dialog" aria-labelledby="claimModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="claimModalLabel">File a Claim</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to Claim this policy?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="ClaimConfirmed">Claim</button>
                </div>
            </div>
        </div>
    </div>

    @* Modal for Renew *@
    <div class="modal fade" id="renewModal" tabindex="-1" role="dialog" aria-labelledby="renewModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="renewModalLabel">Renew Policy</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to renew this policy?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="RenewConfirmed">Renew</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
@code {
    private List<InsuredPolicyDto> insuredPolicies = new List<InsuredPolicyDto>();
    private List<PolicyDto> policies = new List<PolicyDto>();
    private List<InsuranceTypeDto> InsuranceType = new List<InsuranceTypeDto>();
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private int? selectedPolicyId;

    [Parameter]
    public int PolicyHolderId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPolicies();
    }

    private async Task LoadPolicies()
    {
        try
        {
            var policyHolder = await PolicyHolderService.GetById(PolicyHolderId);
            if (policyHolder == null)
            {
                errorMessage = "Policy holder not found.";
                return;
            }

            var insureds = (await InsuredService.GetAll())
                            .Where(i => i.PolicyHolderId == policyHolder.PolicyHolderId)
                            .ToList();

            if (insureds.Any())
            {
                var insuredIds = insureds.Select(i => i.InsuredId).Distinct().ToList();
                insuredPolicies = (await InsuredPolicyService.GetAll())
                                    .Where(ip => insuredIds.Contains(ip.InsuredId))
                                    .ToList();

                if (insuredPolicies.Any())
                {
                    var policyIds = insuredPolicies.Select(ip => ip.PolicyId).Distinct().ToList();
                    policies = (await PolicyService.GetAll())
                                .Where(p => policyIds.Contains(p.PolicyId))
                                .ToList();

                    InsuranceType = await InsuranceTypeService.GetAll();

                    foreach (var insuredPolicy in insuredPolicies)
                    {
                        var policy = policies.FirstOrDefault(p => p.PolicyId == insuredPolicy.PolicyId);
                        if (policy != null)
                        {
                            var daysLeft = (policy.EndDate - DateTime.Today).Days;
                            insuredPolicy.RenewalStatus = daysLeft > 0 ? $"{daysLeft} days left" : "Expired";

                            // Save the updated RenewalStatus to the database
                            await InsuredPolicyService.Update(insuredPolicy);
                        }
                    }
                }
            }
            else
            {
                errorMessage = "No insured individuals found for this policy holder.";
            }
        }
        catch (Exception)
        {
            errorMessage = $"NO Policies To Display !!!";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task WithdrawPolicy(int policyId)
    {
        try
        {
            var insuredPolicy = insuredPolicies.FirstOrDefault(ip => ip.PolicyId == policyId);
            if (insuredPolicy != null)
            {
                insuredPolicy.ApprovalStatus = "Withdrawal"; // Change status to pending
                await InsuredPolicyService.Update(insuredPolicy); // Update the insured policy
                await LoadPolicies(); // Reload policies to reflect changes
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to withdraw policy: {ex.Message}";
        }
    }

    private async Task RenewPolicy(int policyId)
    {
        try
        {
            var Insurance = insuredPolicies.FirstOrDefault(e => e.PolicyId == policyId);
            var InsuredPolicyId = Insurance.InsuredPolicyId;
            var policyToRenew = policies.FirstOrDefault(p => p.PolicyId == policyId);
            if (policyToRenew != null)
            {
                await LoadPolicies();
                Navigation.NavigateTo($"/BuyPlan/{PolicyHolderId}/{InsuredPolicyId}/{policyId}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to renew policy: {ex.Message}";
        }
    }

    private void ClaimPolicy(int policyId)
    {
        var insuredPolicy = insuredPolicies.FirstOrDefault(ip => ip.PolicyId == policyId);
        if (insuredPolicy == null || insuredPolicy.ApprovalStatus != "Approved")
        {
            errorMessage = "Policy cannot be claimed as it is not approved.";
        }
        else
        {
            Navigation.NavigateTo($"/Claim/{PolicyHolderId}");
        }
    }

    private async Task DownloadPolicy(int policyId)
    {
        try
        {
            var insuredPolicy = insuredPolicies.FirstOrDefault(ip => ip.PolicyId == policyId);
            var insuredpolicyId = insuredPolicy.InsuredPolicyId;
            if (insuredPolicy == null || insuredPolicy.ApprovalStatus != "Approved")
            {
                errorMessage = "Policy cannot be downloaded as it is not approved.";
                return;
            }

            var response = await Http.GetAsync($"pdf/GeneratePolicyPdf?insuredpolicyId={insuredpolicyId}");
            response.EnsureSuccessStatusCode();
            var fileName = $"Policy_{policyId}.pdf";
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            await JsRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to download policy: {ex.Message}";
        }
    }

    private string GetRowClass(DateTime endDate)
    {
        var daysLeft = (endDate - DateTime.Today).Days;
        if (daysLeft <= 0)
        {
            return "table-danger";
        }
        else if (daysLeft <= 30)
        {
            return "table-warning";
        }
        else
        {
            return "table-success";
        }
    }

    // conform methods


    private void ShowWithdrawModal(int policyId)
    {
        selectedPolicyId = policyId;
        JsRuntime.InvokeVoidAsync("showModal", "#withdrawModal");
    }

    private async Task WithdrawConfirmed()
    {
        if (selectedPolicyId.HasValue)
        {
            await WithdrawPolicy(selectedPolicyId.Value);
            selectedPolicyId = null;
        }

        JsRuntime.InvokeVoidAsync("hideModal", "#withdrawModal");
    }

    private void ShowDownloadModal(int policyId)
    {
        selectedPolicyId = policyId;
        JsRuntime.InvokeVoidAsync("showModal", "#downloadModal");
    }

    private async Task DownloadConfirmed()
    {
        if (selectedPolicyId.HasValue)
        {
            await DownloadPolicy(selectedPolicyId.Value);
            selectedPolicyId = null;
        }

        JsRuntime.InvokeVoidAsync("hideModal", "#downloadModal");
    }

    private void ShowClaimModal(int policyId)
    {
        selectedPolicyId = policyId;
        JsRuntime.InvokeVoidAsync("showModal", "#claimModal");
    }

    private void ClaimConfirmed()
    {
        if (selectedPolicyId.HasValue)
        {
            ClaimPolicy(selectedPolicyId.Value);
            selectedPolicyId = null;
        }

        JsRuntime.InvokeVoidAsync("hideModal", "#claimModal");
    }

    private void ShowRenewModal(int policyId)
    {
        selectedPolicyId = policyId;
        JsRuntime.InvokeVoidAsync("showModal", "#renewModal");
    }

    private async Task RenewConfirmed()
    {
        if (selectedPolicyId.HasValue)
        {
            await RenewPolicy(selectedPolicyId.Value);
            selectedPolicyId = null;
        }

        JsRuntime.InvokeVoidAsync("hideModal", "#renewModal");
    }

    private void NavigateToProfile() => Navigation.NavigateTo($"/User/{PolicyHolderId}");
    private void NavigateToPlans() => Navigation.NavigateTo($"/PlansAfter/{PolicyHolderId}");
    private void NavigateToPolicies() => Navigation.NavigateTo($"/YourPolicies/{PolicyHolderId}");
    private void NavigateToClaimStatus() => Navigation.NavigateTo($"/ClaimStatus/{PolicyHolderId}");
    private void NavigateToLogin() => Navigation.NavigateTo($"/Login");
    public void Logout()
    {

        Navigation.NavigateTo("/");
    }

}
